(49514, 5)
(49514, 5)
0
(49514, 5)
(49514, 5)
1
(49514, 5)
(49514, 5)
2
(49514, 5)
(49514, 5)
3
(49514, 5)
(49514, 5)
4
(49514, 5)
(49514, 5)
5
(49514, 5)
(49514, 5)
6
(49514, 5)
(49514, 5)
7
(49514, 5)
(49514, 5)
8
(49514, 5)
(49514, 5)
9
(49514, 5)
(49514, 5)
10
(49514, 5)
(49514, 5)
11
(49514, 5)
(49514, 5)
12
(49514, 5)
(49514, 5)
13
(49514, 5)
(49514, 5)
14
(49514, 5)
(49514, 5)
15
(49514, 5)
(49514, 5)
16
(49514, 5)
(49514, 5)
17
(49514, 5)
(49514, 5)
18
(49514, 5)
(49514, 5)
19
(49514, 5)
(49514, 5)
20
(49514, 5)
(49514, 5)
21
(49514, 5)
(49514, 5)
22
(49514, 5)
(49514, 5)
23
(49514, 5)
(49514, 5)
24
(49514, 5)
(49514, 5)
25
(49514, 5)
(49514, 5)
26
(49514, 5)
(49514, 5)
27
(49514, 5)
(49514, 5)
28
(49514, 5)
(49514, 5)
29
(49514, 5)
(49514, 5)
30
(49514, 5)
(49514, 5)
31
(49514, 5)
(49514, 5)
32
(49514, 5)
(49514, 5)
33
(49514, 5)
(49514, 5)
34
(49514, 5)
(49514, 5)
35
(49514, 5)
(49514, 5)
36
(49514, 5)
(49514, 5)
37
(49514, 5)
(49514, 5)
38
(49514, 5)
(49514, 5)
39
(49514, 5)
(49514, 5)
40
(49514, 5)
(49514, 5)
41
(49514, 5)
(49514, 5)
42
(49514, 5)
(49514, 5)
43
(49514, 5)
(49514, 5)
44
(49514, 5)
(49514, 5)
45
(49514, 5)
(49514, 5)
46
(49514, 5)
(49514, 5)
47
(49514, 5)
(49514, 5)
48
(49514, 5)
(49514, 5)
49
(49514, 5)
(49514, 5)
50
(49514, 5)
(49514, 5)
51
(49514, 5)
(49514, 5)
52
(49514, 5)
(49514, 5)
53
(49514, 5)
(49514, 5)
54
(49514, 5)
(49514, 5)
55
(49514, 5)
(49514, 5)
56
(49514, 5)
(49514, 5)
57
(49514, 5)
(49514, 5)
58
(49514, 5)
(49514, 5)
59
(49514, 5)
(49514, 5)
60
(49514, 5)
(49514, 5)
61
(49514, 5)
(49514, 5)
62
(49514, 5)
(49514, 5)
63
(49514, 5)
(49514, 5)
64
(49514, 5)
(49514, 5)
65
(49514, 5)
(49514, 5)
66
(49514, 5)
(49514, 5)
67
(49514, 5)
(49514, 5)
68
(49514, 5)
(49514, 5)
69
(49514, 5)
(49514, 5)
70
(49514, 5)
(49514, 5)
71
(49514, 5)
(49514, 5)
72
(49514, 5)
(49514, 5)
73
(49514, 5)
(49514, 5)
74
(49514, 5)
(49514, 5)
75
(49514, 5)
(49514, 5)
76
(49514, 5)
(49514, 5)
77
(49514, 5)
(49514, 5)
78
(49514, 5)
(49514, 5)
79
(49514, 5)
(49514, 5)
80
(49514, 5)
(49514, 5)
81
(49514, 5)
(49514, 5)
82
(49514, 5)
(49514, 5)
83
(49514, 5)
(49514, 5)
84
(49514, 5)
(49514, 5)
85
(49514, 5)
(49514, 5)
86
(49514, 5)
(49514, 5)
87
(49514, 5)
(49514, 5)
88
(49514, 5)
(49514, 5)
89
(49514, 5)
(49514, 5)
90
(49514, 5)
(49514, 5)
91
(49514, 5)
(49514, 5)
92
(49514, 5)
(49514, 5)
93
(49514, 5)
(49514, 5)
94
(49514, 5)
(49514, 5)
95
(49514, 5)
(49514, 5)
96
(49514, 5)
(49514, 5)
97
(49514, 5)
(49514, 5)
98
(49514, 5)
(49514, 5)
99
(49514, 5)
(49514, 5)
100
(49514, 5)
(49514, 5)
101
(49514, 5)
(49514, 5)
102
(49514, 5)
(49514, 5)
103
(49514, 5)
(49514, 5)
104
(49514, 5)
(49514, 5)
105
Building aes_cipher_top_inline Timing Graph.
Runtime for One Path Inline Sizing: 0 hours, 0 minutes, 1.49 seconds
(49514, 5)
(46139, 5)
Traceback (most recent call last):
  File "/home/jiajiexu/DT_ECO/MOSAC/DT_ECO.py", line 45, in <module>
    agent.buffer.add(obs=obs, next_obs=real_next_obs, action=actions, reward=rewards, done=terminated)
  File "/home/jiajiexu/DT_ECO/MOSAC/DT_ECO_Buffer.py", line 70, in add
    self.next_timing_graph[self.ptr] = np.array(next_obs["timing_graph"]).copy()
    ~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^
ValueError: could not broadcast input array from shape (46139,5) into shape (49514,5)
